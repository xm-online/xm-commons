import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

buildscript {

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("io.swagger:swagger-codegen:${versions.swaggerCodegen}")
    }
}

apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:$versions.springBoot")
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
    }
}

dependencies {

    compile project(':xm-commons-config')

    compile("io.springfox:springfox-swagger2:${versions.springfoxSwagger}") {
        exclude module: 'mapstruct'
    }

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }

    compile "commons-io:commons-io:${versions.commonsIo}"

    testCompile 'junit:junit'
    testCompile "org.mockito:mockito-core"
}


def swaggerSourceFile = 'src/main/resources/swagger-spec/tenant/swagger-tenant-spec.yaml'
def swaggerTargetFolder = 'build/generated-sources'

sourceSets {
    main {
        java.srcDirs += "$swaggerTargetFolder"
    }
}

task generateApi {

    inputs.file("$projectDir/$swaggerSourceFile")
    outputs.dir("$projectDir/$swaggerTargetFolder")

    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
        config.setOutputDir("$projectDir")
        config.setLang('spring')
        config.setTemplateDir("$projectDir/src/main/resources/openapi/mustache/JavaSpring")
        config.setAdditionalProperties([
            //'interfaceOnly': 'true',
            'delegatePattern': 'true',
            'apiPackage'     : 'com.icthh.xm.commons.gen.api',
            'modelPackage'   : 'com.icthh.xm.commons.gen.model',
            'sourceFolder'   : swaggerTargetFolder
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

javadoc {
    failOnError = false
}

compileJava {
    dependsOn generateApi
}

// disable QA for generated code project

checkstyle {
    sourceSets = []
}

pmd {
    sourceSets = []
}

//sonarqube {
//    skipProject = true
//}

