package com.icthh.xm.commons.lep;

import com.icthh.xm.lep.api.LepMethod;
import com.icthh.xm.lep.api.commons.UrlLepResourceKey;
import lombok.experimental.UtilityClass;

import java.util.Set;

/**
 * The {@link XmLepScriptRules} class.
 */
@UtilityClass
@SuppressWarnings("squid:S1118") // private constructor generated by lombok
public final class XmLepScriptRules {

    private static final byte BEFORE_MASK = 0b100000;
    private static final byte AROUND_MASK = 0b010000;
    private static final byte TENANT_MASK = 0b001000;
    private static final byte DEFAULT_MASK = 0b000100;
    private static final byte JAVA_CODE_MASK = 0b000010;
    private static final byte AFTER_MASK = 0b000001;

    private static final byte ZERO_PATTERN_NO_TENANT_AND_DEFAULT_AND_JAVA_CODE = 0b001110;

    private static final byte IS_SET_PATTERN_AROUND_AND_BEFORE = 0b110000;
    private static final byte IS_SET_PATTERN_AROUND_AND_AFTER = 0b010001;
    private static final byte IS_SET_PATTERN_AROUND_AND_TENANT = 0b011000;

    /**
     * Validate script combination.
     *
     * @param scriptTypes          current point script types
     * @param lepMethod            executed LEP method
     * @param compositeResourceKey used only for informative exception message
     */
    public static void validateScriptsCombination(Set<XmLepResourceSubType> scriptTypes,
                                                  LepMethod lepMethod,
                                                  UrlLepResourceKey compositeResourceKey) {
        byte mask = getCombinationMask(scriptTypes, lepMethod, compositeResourceKey);

        StringBuilder errors = new StringBuilder();
        if (isZero(mask, ZERO_PATTERN_NO_TENANT_AND_DEFAULT_AND_JAVA_CODE)) {
            errors.append(String.format("Has no one script of '%s', '%s' or native (java) implementation.",
                                        XmLepResourceSubType.TENANT, XmLepResourceSubType.DEFAULT));
        }

        if (isSetByPattern(mask, IS_SET_PATTERN_AROUND_AND_BEFORE)) {
            if (errors.length() > 0) {
                errors.append(" ");
            }

            errors.append(String.format("Has '%s' script with '%s'.", XmLepResourceSubType.BEFORE, XmLepResourceSubType.AROUND));
        }

        if (isSetByPattern(mask, IS_SET_PATTERN_AROUND_AND_AFTER)) {
            if (errors.length() > 0) {
                errors.append(" ");
            }

            errors.append(String.format("Has '%s' script with '%s'.", XmLepResourceSubType.AROUND, XmLepResourceSubType.AFTER));
        }

        if (isSetByPattern(mask, IS_SET_PATTERN_AROUND_AND_TENANT)) {
            if (errors.length() > 0) {
                errors.append(" ");
            }

            errors.append(String.format("Unallowed combination '%s' and '%s' scripts.", XmLepResourceSubType.AROUND, XmLepResourceSubType.TENANT));
        }

        if (errors.length() > 0) {
            throw new IllegalArgumentException(String.format("Resource key %s has script combination errors. %s",
                                                             compositeResourceKey,
                                                             errors.toString()));

        }
    }

    private static boolean isZero(byte value, byte pattern) {
        return (value & pattern) == 0;
    }

    private static boolean isSetByPattern(byte value, byte pattern) {
        return (value & pattern) == pattern;
    }

    /**
     * Builds script combination mask.
     *
     * @param scriptTypes          current point script types
     * @param lepMethod            executed LEP method
     * @param compositeResourceKey used only for informative exception message
     * @return available scripts mask for current LEP
     */
    private static byte getCombinationMask(Set<XmLepResourceSubType> scriptTypes,
                                           LepMethod lepMethod,
                                           UrlLepResourceKey compositeResourceKey) {
        byte combinationMask = 0;
        for (XmLepResourceSubType scriptType : scriptTypes) {
            switch (scriptType) {
                case BEFORE:
                    combinationMask |= BEFORE_MASK;
                    break;

                case AROUND:
                    combinationMask |= AROUND_MASK;
                    break;

                case TENANT:
                    combinationMask |= TENANT_MASK;
                    break;

                case DEFAULT:
                    combinationMask |= DEFAULT_MASK;
                    break;

                case AFTER:
                    combinationMask |= AFTER_MASK;
                    break;

                default:
                    throw new IllegalArgumentException("Unsupported script type: " + scriptType
                                                           + " for resource key: " + compositeResourceKey
                                                           + ", all script types: " + scriptTypes);
            }
        }

        if (lepMethod.getTarget() != null) {
            combinationMask |= JAVA_CODE_MASK;
        }

        return combinationMask;

    }
}
