buildscript {
    // include versions script
    apply from: rootProject.file('gradle/lib-versions.gradle')

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE")
        classpath("io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0") {
            // Prevent WARNING: xerces entityExpansionLimit and accessExternalDTD
            // generated by `io.codearte.nexus-staging` plugin transitive dependency
            exclude group: 'xerces', module: 'xercesImpl'
        }
    }
}

// Plugin for support environment's with gradle.properties (gradle-local.properties is default local environment)
plugins {
    id 'net.saliman.properties' version "1.5.2"
    id 'org.ajoberstar.grgit' version "2.0.0"
    id "com.github.spotbugs" version '1.6.3'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'maven-publish'
}
apply from: rootProject.file('gradle/git.gradle')

apply plugin: 'base'
apply plugin: 'io.codearte.nexus-staging'

// project parameters
project.group = property('app.group')
project.description = property('app.description')

// project version
apply from: rootProject.file('gradle/version.gradle')

spotbugs {
    toolVersion = '3.1.3'
    ignoreFailures = true
}

wrapper {
    gradleVersion = "${versions.gradle}"
}

allprojects {
    group = property('app.group')
}

apply from: rootProject.file('gradle/nexus-staging.gradle')

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'java-library'
    apply from: rootProject.file('gradle/jacoco.gradle')

    version = parent.version

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    [compileJava, compileTestJava]*.options.collect {
        options -> options.encoding = "UTF-8"
            options.compilerArgs << '-parameters'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${versions.lombok}"
        testCompileOnly "org.projectlombok:lombok:${versions.lombok}"
        annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
        testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    }

    test {
        systemProperty("java.awt.headless", "true")
        systemProperty("testGroups", project.properties.get("testGroups"))

        include '**/*UnitTest*'
        include '**/*IntTest*'

        // uncomment if the tests reports are not generated
        // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
        // ignoreFailures true
        reports.html.enabled = true
        testLogging {
            exceptionFormat = 'full'
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    task testReport(type: TestReport) {
        destinationDir = file("$buildDir/reports/tests")
        reportOn test
    }

    test.finalizedBy(testReport)

    javadoc {
        description = "Generates project-level javadoc for use in -javadoc jar"

        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
        options.use = true
        //options.links(project.ext.javadocLinks)
        options.addStringOption('Xdoclint:none', '-quiet')

        // Suppress warnings due to cross-module @see and @link references.
        // Note that global 'api' task does display all warnings.
        //logging.captureStandardError LogLevel.INFO
        //logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
    }

    task javadocJar(type: Jar) {
        getArchiveClassifier().set('javadoc')
        from javadoc
    }

    task sourcesJar(type: Jar) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        getArchiveClassifier().set('sources')
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    task allDeps(type: DependencyReportTask) {}

    checkstyle {
        toolVersion = versions.checkstyle
        ignoreFailures = true
        configFile = rootProject.file('qa/checkstyle.xml')
        sourceSets = [sourceSets.main]
    }

    pmd {
        rulePriority = 3
        toolVersion = versions.pmd
        ignoreFailures = true
        ruleSetFiles = rootProject.files('qa/pmd.xml')
        sourceSets = [sourceSets.main]
    }

    // use `afterEvaluate` for init some pom values or jar manifest from sub-projects (for example: description)
    afterEvaluate {
        publishing {

            def projectDescription = ((project.description != null) ? project.description : project.name)

            jar {
                manifest {
                    attributes(
                        'Implementation-Vendor': project.property('app.vendor'),
                        'Specification-Title': projectDescription,
                        'SCM-Branch': rootProject.ext.gitBranch,
                        'SCM-Revision': rootProject.ext.gitRevision,
                        'SCM-Revision-Abbreviated': rootProject.ext.gitAbbreviatedRevision
                    )
                }
            }

            repositories {
                if (!project.hasProperty('ossrhUsername') || !project.hasProperty('ossrhPassword')) {
                    mavenLocal()
                    logger.lifecycle("No OSS RH user credentail defined - you can't deploy artifacts")
                } else {
                    if (isRelease(project)) {
                        // id: 'sonatype-nexus-staging',
                        maven {
                            name = "ossrh-staging-api"
                            url  = uri(artifactoryStaging)
                            credentials {
                                username ossrhUsername
                                password ossrhPassword
                            }
                        }
                    } else {
                        // id: 'sonatype-nexus-snapshots'
                        maven {
                            url artifactorySnapshot
                            credentials {
                                username ossrhUsername
                                password ossrhPassword
                            }
                        }
                    }
                }
            }

            publications {
                mavenJava(MavenPublication) {
                    pom {

                        packaging = 'jar'
                        name = project.name
                        description = projectDescription
                        url = 'https://xm.icthh.com'

                        scm {
                            url = 'https://github.com/xm-online/xm-commons'
                            connection = 'scm:git:git://github.com/xm-online/xm-commons.git'
                            developerConnection = 'scm:git:git://github.com/xm-online/xm-commons.git'
                        }

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = 'adovbnya'
                                name = 'Alexander Dovbnya'
                                email = 'adovbnya@icthh.com'
                            }

                            developer {
                                id = 'agorobey'
                                name = 'Aleksey Gorobey'
                            }

                            developer {
                                id = 'amedvedchuk'
                                name = 'Anatoliy Medvedchuk'
                            }

                            developer {
                                id = 'bonertale'
                                name = 'Alexander Bonert'
                            }

                            developer {
                                id = 'emonastyrev'
                                name = 'Evgen Monastyrev'
                            }

                            developer {
                                id = 'epikuza'
                                name = 'Elena Pikuza'
                            }

                            developer {
                                id = 'ishkurko'
                                name = 'Igor Shkurko'
                                email = 'ishkurko@icthh.com'
                            }

                            developer {
                                id = 'okoval'
                                name = 'Olha Koval'
                            }

                            developer {
                                id = 'ssenko'
                                name = 'Serhii Senko'
                            }
                        }

                    }

                    // remove test dependencies from pom file
                    pom.withXml {
                        Node pomNode = asNode()
                        pomNode.dependencies.'*'.findAll() {
                            it.scope.text() == 'test'
                        }.each() {
                            it.parent().remove(it)
                        }
                    }

                }
            }

        }
        signing {
            // We only want to require signing if we are building a release version and we are going to publish it.
            // Because we are inspecting the task graph to determine if we are going to be publishing,
            // we must set the signing.required property to a closure to defer the evaluation
            required {
                isRelease(project) && gradle.taskGraph.hasTask("publish")
            }
            //sign configurations.archives
            sign publishing.publications.mavenJava
        }
    }

}

boolean isRelease(Project project) {
    def semVer = SemVersion.valueOf(String.valueOf(project.version))
    return semVer.isRelease()
}

clean.doFirst {
    delete rootProject.buildDir
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}
